bool is_permutation(vector<int>v){
    sort(all(v));
    vector<int>t;for (int i =1;i<=v.size();i++)t.pb(i);
    for (int i =0;i<v.size();i++)if (v[i]!=t[i])return 0;
    return 1;
}


// orderd set
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define ordered_set tree<int, null_type,less_equal<int>, rb_tree_tag,tree_order_statistics_node_update>

ordered_set st;
st.order_of_key(number);// number of elem. less than (..)
find_by_order(number) // get index



//   permutation the arr
 cin>>n;
    vector<int>arr(n);
    //   permutation the arr
    for (int i = 0; i < n; ++i) {
        arr[i] = i+1;
    }
    do{
        for (int i: arr)cout << i << " ";
             cout << "\n";
    }while(next_permutation(arr.begin(),arr.end()));



int res_of_array (vector<int>v){
    ll res =0;
    loop (v.size()){
        res += v.at(i);
    }
    return res;
}

long long GCD(long long a, long long b) {
    while (b != 0) {
        long long temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

long long LCM (long long a, long long b) {
    return a/GCD(a,b)*b;
}


 long long c(int n, int k) {
     long long result = 1;
    for (int i = 0; i < k; ++i) {
        result *= (n - i);
        result /= (i + 1);
    }
    return result;
}

ll p(int n, int k) {
    ll result = 1;
    for (int i = 0; i < k; ++i) {
        result *= (n - i);
    }
    return result;
}
ll f (ll a){
    ll res=1;
    for (int i =2;i<=a;i++){
        res*=i;
    }
    return res;
}
void re(int &a,int &b){
    // make a<b always;
    if (b<a)
        swap(a,b);
}

bool is_prime(ll n){
    if (n==1)return 0;
    if (n==2)return 1;
    int z=sqrt(n);
    for (int i =2;i<=z;i++){
        if (n%i==0)return 0;
    }
    return 1;
}
int to_dec(string s){
    int siz=s.size();
    int res=0;
    int x=0;
    for(int i =siz-1;i>=0;i--){
        res+=int(s[i]-'0')*pow(2,x);
        x++;
    }
    return res;
}
string to_bin(int n){
    string sol="";
    while (n>0) {
        if (n & 1)sol.pb('1');
        else sol.pb('0');n/=2;
    }sol.pb('0');reverse(all(sol));
    return sol;
}
long long fast_pow (ll x,ll n){
    //  x  power n;
    ll res=1;
    while(n>0){
        if (n%2==1){
            res*=x;
        }
        x*=x;
        n/=2;
    }
    return res;
}